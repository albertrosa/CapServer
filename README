# IDENTITY SERVER

This is required for OAuth process.

This repo will be used with render.com to build and deploy test apps. 


## Setup

```
npm install
```


## Start Server

```
node app.js
```


### RULE METAS TABLE
```mysql
create table  rule_metas(
  id int NOT NULL AUTO_INCREMENT,
  send varchar(255) NOT NULL, 
  rule varchar(255) NOT NULL, 
  data LONGTEXT, 
  created TIMESTAMP,
  PRIMARY KEY (id)
)
```


From DeepSeekllama8B
# Captain Fun - Twitter App

A Node.js backend server that handles OAuth flow with Twitter and manages user interactions.

## Table of Contents
- [Description](#description)
- [Key Features](#key-features)
- [Installation](#installation)
- [Configuration](#configuration)
- [Running the Server](#running-the-server)
- [Using the Application](#using-the-application)
- [Security](#security)
- [Error Handling](#error-handling)
- [For Developers](#for-developers)
- [License](#license)

## Description

This Express.js server acts as a middleware to handle Twitter OAuth flow and provides APIs for managing user data, including followers, search, and metadata. It is designed to be highly secure, using HTTPS, session management, and input validation.

## Key Features

- **OAuth 2.0 Authentication**: Handles Twitter login flow with proper state management
- **User Data Management**: Fetches and caches user details and follows
- **API Endpoints**:
  - /twitter/login: Initialize Twitter login
  - /twitter/callback: Handle Twitter callback after login
  - /status: Check session status
  - /logout: Logout current user
  - /meta: Manage metadata rules and data
  - Other endpoints for follows, users, posts, and verification

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
cd Captain-Fun
```

2. Install dependencies:
```
npm install express cors dotenv twitter-api-sdk mysql2 promise
```

## Configuration
Create a .env file in your project root with the following variables:

- DB_HOST=your_database_host
- DB_PORT=your_database_port
- DB_USER=your_database_user
- DB_PASS=your_database_password
- DB_DATABASE=your_database_name
- PORT=3000
- X_ACCOUNT=your_twitter_api_client_id
- X_SECRET=your_twitter_api_client_secret
- BEARER_TOKEN=your_bearer_token
- SESSION_SECRET=your_session_encryption_key
## Running the Server
- Start the server:

```bash
node app.js
```

The server will start on port 3000 and be accessible at http://localhost:3000.

# Using the Application
## API Endpoints
- /twitter/login: Redirects to Twitter for OAuth login
- /twitter/callback: Handles the callback after Twitter login
- /status: Returns current session status
- /logout: Logs out current user and redirects to status page
- /meta: Manages metadata rules and data storage
## Security
- Uses HTTPS for sensitive operations
- Enforces CSRF protection
- Implements rate limiting
- Stores sensitive information in sessions, not cookies
- Regularly cleans up old sessions
## Error Handling
The server uses try-catch blocks to handle errors and provides detailed error responses. Errors are logged to the console for further investigation.

# For Developers
## Making Changes
To modify the code:

1. Open the file with your preferred editor.
2. Make the necessary changes.
3. Use the apply button in chat mode or switch to agent mode to apply updates automatically.
4. Environment Variables
5. All environment variables are stored in the .env file and accessed using process.env.

License
Captain.fun

For support or further information, contact: [author]